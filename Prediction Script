import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image as keras_image
from tensorflow.keras.models import load_model

# Load model
model = load_model('smart_sorting_model.h5')

# Class names (adjust to your dataset)
class_names = ['fresh', 'medium', 'rotten']

def predict_image(img_path):
    img = keras_image.load_img(img_path, target_size=(224, 224))
    img_array = keras_image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    prediction = model.predict(img_array)
    predicted_class = class_names[np.argmax(prediction)]
    confidence = np.max(prediction)
    return predicted_class, confidence

# Example usage
image_path = 'path_to_your_test_image.jpg'
predicted_class, confidence = predict_image(image_path)
print(f"Predicted: {predicted_class} (Confidence: {confidence:.2f})")
